se_type = "CR0",
data = filter(data, t==2)))
#Agregar las parejas
summary(e2 <- lm_robust(StdAnderAgencyIndex ~ hopegroup + age + educ + evangelical + children + children_under_18 + bankleader + Dwelling_Index +
factor(pair_number),
clusters = communitybank,
se_type = "CR0",
data = filter(data, t==2)))
#2. Estimación de efectos de tratamiento
summary(e1 <- lm_robust(StdAnderAgencyIndex ~ hopegroup + age + educ + evangelical + children + children_under_18 + bankleader + Dwelling_Index,
clusters = communitybank,
se_type = "CR0",
data = filter(data, t==2)))
#Agregar las parejas
summary(e2 <- lm_robust(StdAnderAgencyIndex ~ hopegroup + age + educ + evangelical + children + children_under_18 + bankleader + Dwelling_Index +
factor(pair_number),
clusters = communitybank,
se_type = "CR0",
data = filter(data, t==2)))
modelsummary::modelsummary(e1, e2,
statistic = "std.error",
coef_map = c('hopegroup' = "Hope Group"),
coef_omit = "Intercept",
gof_omit = 'DF|Deviance|R2|AIC|BIC',
stars=c('*' = .1, '**' = .05, '***'=0.01))
#Todo en una tabla
modelsummary::modelsummary(models,
gof_omit = 'DF|Deviance|R2|AIC|BIC',
stars=c('*' = .1, '**' = .05, '***'=0.01))
modelsummary::modelsummary(e1, e2,
statistic = "std.error",
gof_omit = 'DF|Deviance|R2|AIC|BIC',
stars=c('*' = .1, '**' = .05, '***'=0.01))
modelsummary::modelsummary(list(e1, e2),
statistic = "std.error",
coef_map = c('hopegroup' = "Hope Group"),
coef_omit = "Intercept",
gof_omit = 'DF|Deviance|R2|AIC|BIC',
stars=c('*' = .1, '**' = .05, '***'=0.01))
#2. Estimación de efectos de tratamiento
summary(e0 <- lm_robust(StdAnderAgencyIndex ~ hopegroup,
se_type = "HC1",
data = filter(data, t==2)))
summary(e0 <- lm_robust(StdAnderAgencyIndex ~ hopegroup,
se_type = "HC1",
data = filter(data, t==2)))
#Errores agrupados
summary(e1 <- lm_robust(StdAnderAgencyIndex ~ hopegroup + age + educ + evangelical + children + children_under_18 + bankleader + Dwelling_Index,
clusters = communitybank,
se_type = "CR0",
data = filter(data, t==2)))
#Agregar las parejas
summary(e2 <- lm_robust(StdAnderAgencyIndex ~ hopegroup + age + educ + evangelical + children + children_under_18 + bankleader + Dwelling_Index +
factor(pair_number),
clusters = communitybank,
se_type = "CR0",
data = filter(data, t==2)))
modelsummary::modelsummary(list(e0, e1, e2),
statistic = "std.error",
coef_map = c('hopegroup' = "Hope Group"),
coef_omit = "Intercept",
gof_omit = 'DF|Deviance|R2|AIC|BIC',
stars=c('*' = .1, '**' = .05, '***'=0.01))
summary(e0 <- lm_robust(StdAnderAgencyIndex ~ hopegroup + age + educ + evangelical + children + children_under_18 + bankleader + Dwelling_Index,
se_type = "HC1",
data = filter(data, t==2)))
#2. Estimación de efectos de tratamiento
#Solo errores robustos
summary(e0a <- lm_robust(StdAnderAgencyIndex ~ hopegroup,
se_type = "HC1",
data = filter(data, t==2)))
#Agregamos controles
summary(e0b <- lm_robust(StdAnderAgencyIndex ~ hopegroup + age + educ + evangelical + children + children_under_18 + bankleader + Dwelling_Index,
se_type = "HC1",
data = filter(data, t==2)))
#Errores agrupados
summary(e1 <- lm_robust(StdAnderAgencyIndex ~ hopegroup + age + educ + evangelical + children + children_under_18 + bankleader + Dwelling_Index,
clusters = communitybank,
se_type = "CR0",
data = filter(data, t==2)))
#Agregar indicadoras de parejas
summary(e2 <- lm_robust(StdAnderAgencyIndex ~ hopegroup + age + educ + evangelical + children + children_under_18 + bankleader + Dwelling_Index +
factor(pair_number),
clusters = communitybank,
se_type = "CR0",
data = filter(data, t==2)))
modelsummary::modelsummary(list(e0, e1, e2),
statistic = "std.error",
coef_map = c('hopegroup' = "Hope Group"),
coef_omit = "Intercept",
gof_omit = 'DF|Deviance|R2|AIC|BIC',
stars=c('*' = .1, '**' = .05, '***'=0.01))
modelsummary::modelsummary(list(e0a, e0b, e1, e2),
statistic = "std.error",
coef_map = c('hopegroup' = "Hope Group"),
coef_omit = "Intercept",
gof_omit = 'DF|Deviance|R2|AIC|BIC',
stars=c('*' = .1, '**' = .05, '***'=0.01))
#3. ANCOVA
#Agregar el valor de y en la línea base y un indicador para valores faltantes
summary(e3 <- lm_robust(StdAnderAgencyIndex ~ hopegroup + age + educ + evangelical + children + children_under_18 + bankleader + Dwelling_Index +
factor(pair_number) +
Baseline_StdAnderAgencyIndex +
M_Baseline_StdAnderAgencyIndex,
clusters = communitybank,
se_type = "CR0",
data = filter(data, t==2)))
modelsummary::modelsummary(list(e0a, e0b, e1, e2, e3),
statistic = "std.error",
coef_map = c('hopegroup' = "Hope Group"),
coef_omit = "Intercept",
gof_omit = 'DF|Deviance|R2|AIC|BIC',
stars=c('*' = .1, '**' = .05, '***'=0.01))
summary(epaper <- lm_robust(StdAnderAgencyIndex ~ hopegroup:followup1 + hopegroup:followup2 + followup2 +
age + educ + evangelical + children + children_under_18 + bankleader + Dwelling_Index +
factor(pair_number) +
Baseline_StdAnderAgencyIndex +
M_Baseline_StdAnderAgencyIndex,
clusters = communitybank,
se_type = "stata",
data = filter(data,t!=0)))
#Usamos los datos de la ronda de seguimiento de 1 mes y la ronda final al mismo tiempo
summary(epaper <- lm_robust(StdAnderAgencyIndex ~ hopegroup:followup1 + hopegroup:followup2 + followup2 +
age + educ + evangelical + children + children_under_18 + bankleader + Dwelling_Index +
factor(pair_number) + factor(type_of_business)
Baseline_StdAnderAgencyIndex +
M_Baseline_StdAnderAgencyIndex,
clusters = communitybank,
se_type = "stata",
data = filter(data,t!=0)))
#Usamos los datos de la ronda de seguimiento de 1 mes y la ronda final al mismo tiempo
summary(epaper <- lm_robust(StdAnderAgencyIndex ~ hopegroup:followup1 + hopegroup:followup2 + followup2 +
age + educ + evangelical + children + children_under_18 + bankleader + Dwelling_Index +
factor(pair_number) + factor(type_of_business) +
Baseline_StdAnderAgencyIndex +
M_Baseline_StdAnderAgencyIndex,
clusters = communitybank,
se_type = "stata",
data = filter(data,t!=0)))
modelsummary::modelsummary(list('robustos'=e0a, e0b, e1, e2),
statistic = "std.error",
coef_map = c('hopegroup' = "Hope Group"),
coef_omit = "Intercept",
gof_omit = 'DF|Deviance|R2|AIC|BIC',
stars=c('*' = .1, '**' = .05, '***'=0.01))
modelsummary::modelsummary(list('Errores Robustos'=e0a,
'Errores Robustos + X'=e0b,
'Errores agrupados'=e1,
'Con parejas'=e2),
statistic = "std.error",
coef_map = c('hopegroup' = "Hope Group"),
coef_omit = "Intercept",
gof_omit = 'DF|Deviance|R2|AIC|BIC',
stars=c('*' = .1, '**' = .05, '***'=0.01))
modelsummary::modelsummary(list('Errores Robustos'=e0a,
'Errores Robustos + X'=e0b,
'Errores agrupados + X'=e1,
'Errores agrupados + X + parejas'=e2),
statistic = "std.error",
coef_map = c('hopegroup' = "Hope Group"),
coef_omit = "Intercept",
gof_omit = 'DF|Deviance|R2|AIC|BIC',
stars=c('*' = .1, '**' = .05, '***'=0.01))
modelsummary::modelsummary(list('Errores Robustos'=e0a,
'Errores Robustos + X'=e0b,
'Errores agrupados + X'=e1,
'Errores agrupados + X + parejas'=e2,
'+ ANCOVA'=e3),
statistic = "std.error",
coef_map = c('hopegroup' = "Hope Group"),
coef_omit = "Intercept",
gof_omit = 'DF|Deviance|R2|AIC|BIC',
stars=c('*' = .1, '**' = .05, '***'=0.01))
modelsummary::modelsummary(list('Errores Robustos'=e0a,
'Errores Robustos + X'=e0b,
'Errores agrupados + X'=e1,
'Errores agrupados + X + parejas'=e2),
statistic = "std.error",
coef_map = c('hopegroup' = "Hope Group"),
coef_omit = "Intercept",
gof_omit = 'DF|Deviance|R2|AIC|BIC',
stars=c('*' = .1, '**' = .05, '***'=0.01),
title = "Efectos de tratamiento en índice de agencia 12 meses después de la intervención")
modelsummary::modelsummary(list('Errores Robustos'=e0a,
'Errores Robustos + X'=e0b,
'Errores agrupados + X'=e1,
'Errores agrupados + X + parejas'=e2,
'+ ANCOVA'=e3),
statistic = "std.error",
coef_map = c('hopegroup' = "Hope Group"),
coef_omit = "Intercept",
gof_omit = 'DF|Deviance|R2|AIC|BIC',
stars=c('*' = .1, '**' = .05, '***'=0.01),
title = "Efectos de tratamiento en el índice de agencia 12 meses después de la intervención")
# Espacio de trabajo ----
rm(list = ls())
options(scipen=999) # Prevenir notación científica
library(tidyverse)
rm(list = ls())
options(scipen=999)
library(tidyverse)
ESAA_Puebla_MX = haven::read_sav("ESAA_Puebla_MX.SAV")
ESAA_Puebla_MX = haven::read_sav("C:/Users/rojas/Dropbox/seguridad_alimentaria/ESAA_Puebla_MX.SAV")
View(ESAA_Puebla_MX)
View(ESAA_Puebla_MX)
write.csv(ESAA_Puebla_MX, "C:/Users/rojas/Dropbox/seguridad_alimentaria/ESAA_Puebla_MX.csv")
write.csv(ESAA_Puebla_MX,
"C:/Users/rojas/Dropbox/seguridad_alimentaria/ESAA_Puebla_MX.csv",
row.names = F)
ESAA_Tabasco_MX = haven::read_sav("C:/Users/rojas/Dropbox/seguridad_alimentaria/ESAA_Tabasco_MX.SAV")
write.csv(ESAA_Tabasco_MX,
"C:/Users/rojas/Dropbox/seguridad_alimentaria/ESAA_Tabasco_MX.csv",
row.names = F)
# Espacio de trabajo ----
rm(list = ls())
options(scipen=999) # Prevenir notación científica
library(tidyverse)
library(janitor)
library(sandwich)
library(readr)
library(sandwich)
library(clubSandwich)
library(modelsummary)
library(estimatr)
library(stargazer)
library(lfe)
##Augmented SC----
#devtools::install_github("ebenmichael/augsynth")
library(augsynth)
data(kansas)
kansas %>%
select(year, qtr, year_qtr, state, treated, gdp, lngdpcapita) %>%
filter(state == "Kansas" & year_qtr >= 2012 & year_qtr < 2013)
syn <- augsynth(lngdpcapita ~ treated,
unit = fips,
time = year_qtr,
data = kansas,
progfunc = "None",
scm = T)
summary(syn)
#Do a graph
dp <- kansas %>%
filter(state=="Kansas") %>%
select(year_qtr, lngdpcapita) %>%
mutate(ys=predict(syn)) %>%
rename(y=lngdpcapita) %>%
mutate(gap=y-ys)
dp %>%
ggplot()+
geom_line(aes(y=y,x=year_qtr)) +
geom_line(aes(y=ys,x=year_qtr), linetype = "dashed")+
ylab("Per capita GDP")+
xlab("year/qtr")+
geom_vline(xintercept=2012.50, color = "black", size=1, linetype="dashed")
View(kansas)
View(kansas)
kansas %>%
select(year, qtr, year_qtr, state, treated, gdp, lngdpcapita) %>%
filter(state == "Kansas" & year_qtr >= 2012 & year_qtr < 2013)
summary(syn)
dp <- kansas %>%
filter(state=="Kansas") %>%
select(year_qtr, lngdpcapita) %>%
mutate(ys=predict(syn)) %>%
rename(y=lngdpcapita) %>%
mutate(gap=y-ys)
dp
dp
dp %>%
ggplot()+
geom_line(aes(y=y,x=year_qtr)) +
geom_line(aes(y=ys,x=year_qtr), linetype = "dashed")+
ylab("Per capita GDP")+
xlab("year/qtr")+
geom_vline(xintercept=2012.50, color = "black", size=1, linetype="dashed")
?augsynth
write('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', file = "~/.Renviron", append = TRUE)
Sys.which("make")
install.packages("jsonlite", type = "source")
??jsonlite
blogdown:::preview_site()
blogdown:::preview_site()
blogdown:::preview_site()
install.packages('tinytex')
blogdown:::preview_site()
install.packages('kableExtra')
install.packages('kable')
install.packages('knitr')
install.packages("knitr")
install.packages('bookdown')
install.packages('tinytex')
?kbl
??kbl
# Espacio de trabajo ----
rm(list = ls())
options(scipen=999) # Prevenir notación científica
setwd("C:/Users/rojas/Dropbox/Econometría II/data_examples")
library(tidyverse)
library(janitor)
library(modelsummary)
#Datos de Cameron y Trivedi (2005)
data_fishing<-read_csv("./fishing_data.csv",
locale = locale(encoding = "latin1"))   %>%
clean_names()
install.packages('nnet')
library(nnet)
data_fishing<-read_csv(
"./fishing_data.csv",
locale = locale(encoding = "latin1")) %>%
clean_names() %>%
mutate(income=income/1000)
mmultilogit_1 <- multinom(
mode ~ income,
data = data_fishing)
summar(mmultilogit_1)
summary(mmultilogit_1)
z <- summary(mmultilogit_1)$coefficients/summary(mmultilogit_1)$standard.errors
pv <- (1 - pnorm(abs(z)))*2
pv
library(survival)
View(data_fishing)
mnl1 <- multinom(
mode ~ income,
data = data_fishing)
#Reproduce columna (2) en la tabla 15.2
summary(mnl1)
#Si nos interesan los valores p
z <- summary(mnl1)$coefficients/summary(mnl1)$standard.errors
pv <- (1 - pnorm(abs(z)))*2
pv
cl1 <- clogit(mode ~ pbeach + ppier + pprivate + pcharter +
qbeach + qpier + qprivate + qcharter,
data = data_fishing)
data_fishing_largo <- data_fishing %>%
select(client, mode, pbeach, ppier, pprivate, pcharter, qbeach, qpier, qprivate, qcharter)
data_fishing_largo <- data_fishing %>%
select(client, dpeach, dpier, dprivate, dcharter, pbeach, ppier, pprivate, pcharter, qbeach, qpier, qprivate, qcharter) %>%
pivot_longer(cols = c(dpeach, dpier, dprivate, dcharter, pbeach, ppier, pprivate, pcharter, qbeach, qpier, qprivate, qcharter))
data_fishing_largo <- data_fishing %>%
select(client, dpeach, dpier, dprivate, dcharter, pbeach, ppier, pprivate, pcharter, qbeach, qpier, qprivate, qcharter) %>%
pivot_longer(cols = c(dbeach, dpier, dprivate, dcharter, pbeach, ppier, pprivate, pcharter, qbeach, qpier, qprivate, qcharter))
data_fishing_largo <- data_fishing %>%
select(client, dbeach, dpier, dprivate, dcharter, pbeach, ppier, pprivate, pcharter, qbeach, qpier, qprivate, qcharter) %>%
pivot_longer(cols = c(dbeach, dpier, dprivate, dcharter, pbeach, ppier, pprivate, pcharter, qbeach, qpier, qprivate, qcharter))
View(data_fishing_largo)
View(data_fishing_largo)
data_fishing_largo <- data_fishing %>%
select(client, dbeach, dpier, dprivate, dcharter) %>%
pivot_longer(cols = c(dbeach, dpier, dprivate, dcharter),
names_prefix = "d")
data_fishing_largo <- data_fishing %>%
select(client, dbeach, dpier, dprivate, dcharter, pbeach, ppier, pprivate, pcharter, qbeach, qpier, qprivate, qcharter) %>%
pivot_longer(cols = c(dbeach, dpier, dprivate, dcharter, pbeach, ppier, pprivate, pcharter, qbeach, qpier, qprivate, qcharter),
names_prefix = c("d,p,q"))
data_fishing_largo <- data_fishing %>%
select(client, dbeach, dpier, dprivate, dcharter, pbeach, ppier, pprivate, pcharter, qbeach, qpier, qprivate, qcharter) %>%
pivot_longer(cols = c(dbeach, dpier, dprivate, dcharter, pbeach, ppier, pprivate, pcharter, qbeach, qpier, qprivate, qcharter),
names_to = c("mode", ".value"),
names_pattern = "(.+)(.+$)")
temp <- pivot_longer(data_fishing_largo, -client,
names_sep = "\\.", names_to = c("mode", "feature"))
data_fishing_largo <- data_fishing %>%
select(client, dbeach, dpier, dprivate, dcharter, pbeach, ppier, pprivate, pcharter, qbeach, qpier, qprivate, qcharter)
temp <- pivot_longer(data_fishing_largo, -client,
names_sep = "\\.", names_to = c("mode", "feature"))
View(temp)
View(temp)
answer <- pivot_wider(temp, id_cols = c("client", "mode"), names_from= "feature", values_from="value")
View(answer)
View(answer)
temp <- pivot_longer(data_fishing_largo, -client,
names_sep = "\\.", names_to = c("mode", "feature"))
set.seed(1)
df <- data.frame(
date = rep(seq(as.Date("2020-01-01"),as.Date("2020-01-05"),by="day"),each=6),
k = rep(c("A.mean","A.median","A.min","B.mean","B.median","B.min"),5),
v = runif(30,0,50)
) %>%
pivot_wider(names_from = k, values_from = v)
temp <- pivot_longer(df, -date, names_sep = "\\.", names_to = c("k", "stat"))
View(temp)
View(temp)
data_fishing_largo <- data_fishing %>%
select(client, dbeach, dpier, dprivate, dcharter, pbeach, ppier, pprivate, pcharter, qbeach, qpier, qprivate, qcharter)
temp <- pivot_longer(data_fishing_largo, -client,
names_sep = "\\.", names_to = c("mode", "feature"))
temp <- pivot_longer(data_fishing_largo, -client,
names_pattern = "new_?(.*)",
names_to = c("mode", "feature"))
temp <- pivot_longer(data_fishing_largo, -client,
names_pattern = "new_?(.*)(.)",
names_to = c("mode", "feature"))
temp <- pivot_longer(data_fishing_largo, -client,
names_pattern = "(.*)(.)",
names_to = c("mode", "feature"))
temp <- pivot_longer(data_fishing_largo, -client,
names_pattern = "(.)(.*)",
names_to = c("mode", "feature"))
temp <- pivot_longer(data_fishing_largo, -client,
names_pattern = "(.)(.*)",
names_to = c("feature", "mode"))
answer <- pivot_wider(temp, id_cols = c("client", "mode"), names_from= "feature", values_from="value")
data_fishing_largo <- data_fishing %>%
select(client, dbeach, dpier, dprivate, dcharter, pbeach, ppier, pprivate, pcharter, qbeach, qpier, qprivate, qcharter) %>%
pivot_longer(data_fishing_largo, -client,
names_pattern = "(.)(.*)",
names_to = c("feature", "mode")) %>%
pivot_wider(temp, id_cols = c("client", "mode"), names_from= "feature", values_from="value")
data_fishing_largo <- data_fishing %>%
select(client, dbeach, dpier, dprivate, dcharter, pbeach, ppier, pprivate, pcharter, qbeach, qpier, qprivate, qcharter) %>%
pivot_longer(data_fishing_largo, -client,
names_pattern = "(.)(.*)",
names_to = c("feature", "mode")) %>%
pivot_wider(temp, id_cols = c("client", "mode"), names_from= "feature", values_from="value")
data_fishing_largo <- data_fishing %>%
select(client, dbeach, dpier, dprivate, dcharter, pbeach, ppier, pprivate, pcharter, qbeach, qpier, qprivate, qcharter)
temp <- pivot_longer(data_fishing_largo, -client,
names_pattern = "(.)(.*)",
names_to = c("feature", "mode"))
answer <- pivot_wider(temp, id_cols = c("client", "mode"), names_from= "feature", values_from="value")
data_fishing_largo <- data_fishing %>%
select(client, dbeach, dpier, dprivate, dcharter, pbeach, ppier, pprivate, pcharter, qbeach, qpier, qprivate, qcharter) %>% pivot_longer(data_fishing_largo, -client,
names_pattern = "(.)(.*)",
names_to = c("feature", "mode"))
data_fishing_largo <- data_fishing %>%
select(client, dbeach, dpier, dprivate, dcharter, pbeach, ppier, pprivate, pcharter, qbeach, qpier, qprivate, qcharter) %>%
pivot_longer(columns = -client,
names_pattern = "(.)(.*)",
names_to = c("feature", "mode"))
data_fishing_largo <- data_fishing %>%
select(client, dbeach, dpier, dprivate, dcharter, pbeach, ppier, pprivate, pcharter, qbeach, qpier, qprivate, qcharter) %>%
pivot_longer(columns = -c(client),
names_pattern = "(.)(.*)",
names_to = c("feature", "mode"))
?pivot_longer
data_fishing_largo <- data_fishing %>%
select(client, dbeach, dpier, dprivate, dcharter, pbeach, ppier, pprivate, pcharter, qbeach, qpier, qprivate, qcharter) %>%
pivot_longer(cols = -client,
names_pattern = "(.)(.*)",
names_to = c("feature", "mode"))
data_fishing_largo <- data_fishing %>%
select(client, dbeach, dpier, dprivate, dcharter, pbeach, ppier, pprivate, pcharter, qbeach, qpier, qprivate, qcharter) %>%
pivot_longer(cols = -client,
names_pattern = "(.)(.*)",
names_to = c("feature", "mode")) %>%
pivot_wider(id_cols = c("client", "mode"),
names_from= "feature",
values_from="value")
cl1 <- clogit(d ~ p + q,
data = data_fishing_largo)
summary(cl1)
cl1 <- clogit(d ~ p + q + strata(cliente),
data = data_fishing_largo)
cl1 <- clogit(d ~ p + q + strata(client),
data = data_fishing_largo)
summary(cl1)
data_fishing_largo <- data_fishing %>%
select(client, income, dbeach, dpier, dprivate, dcharter, pbeach, ppier, pprivate, pcharter, qbeach, qpier, qprivate, qcharter) %>%
pivot_longer(cols = -client,
names_pattern = "(.)(.*)",
names_to = c("feature", "mode")) %>%
pivot_wider(id_cols = c("client", "mode"),
names_from= "feature",
values_from="value")
data_fishing_largo <- data_fishing %>%
select(client, income, dbeach, dpier, dprivate, dcharter, pbeach, ppier, pprivate, pcharter, qbeach, qpier, qprivate, qcharter) %>%
pivot_longer(cols = -c(client, income),
names_pattern = "(.)(.*)",
names_to = c("feature", "mode")) %>%
pivot_wider(id_cols = c("client", "mode"),
names_from= "feature",
values_from="value")
data_fishing_largo <- data_fishing %>%
select(client, income, dbeach, dpier, dprivate, dcharter, pbeach, ppier, pprivate, pcharter, qbeach, qpier, qprivate, qcharter) %>%
pivot_longer(cols = -c(client, income),
names_pattern = "(.)(.*)",
names_to = c("feature", "mode"))
data_fishing_largo <- data_fishing %>%
select(client, income, dbeach, dpier, dprivate, dcharter, pbeach, ppier, pprivate, pcharter, qbeach, qpier, qprivate, qcharter) %>%
pivot_longer(cols = -c(client, income),
names_pattern = "(.)(.*)",
names_to = c("feature", "mode")) %>%
pivot_wider(id_cols = c("client", "mode", "income"),
names_from= "feature",
values_from="value")
cl1 <- clogit(d ~ p + q + strata(client),
data = data_fishing_largo)
summary(cl1)
data_fishing_largo <- data_fishing_largo %>%
mutate(dbeach=ifelse(mode=="beach",1,0),
dpier=ifelse(mode=="pier",1,0),
dprivate=ifelse(mode=="private",1,0),
dcharter=ifelse(mode=="charter",1,0))
cl2 <- clogit(d ~ dpier + dprivate + dcharter +
dpier*income + dprivate*income + dcharter*income +
strata(client),
data = data_fishing_largo)
summary(cl2)
cl3 <- clogit(d ~ p + c +
dpier + dprivate + dcharter +
dpier*income + dprivate*income + dcharter*income +
strata(client),
data = data_fishing_largo)
cl3 <- clogit(d ~ p + q +
dpier + dprivate + dcharter +
dpier*income + dprivate*income + dcharter*income +
strata(client),
data = data_fishing_largo)
summary(cl3)
blogdown:::preview_site()
xaringan::infinite_moon_reader()
xaringan::infinite_moon_reader()
